#include <iostream>
#include <exception>

namespace Underwood
{


template <typename Key, typename Value>
Hash<Key,Value>::Hash()
{
    //251 is greatest prime <= 256.
    list = new Value[251];  
    exists = new bool[251];
    for(unsigned int i = 0; i < 251; ++i)
        exists[i] = false;
    max_size = 251;
    used = 0;
};

template <typename Key, typename Value>
Hash<Key,Value>::Hash(unsigned long input)
{
    list = new Value[input];  
    exists = new bool[input];
    for(unsigned long i = 0; i < input; ++i)
        exists[i] = false;
    max_size = input;
    used = 0;
}; 

template <typename Key, typename Value>
Hash<Key,Value>::~Hash()
{
    for(unsigned long i = 0; i < max_size; ++i)
    {
//        if(exists[i]) delete list[i];
    }
};


template <typename Key, typename Value>
Value Hash<Key,Value>::get(const Key& input)
{
    unsigned long hashVal = max_size; 

    for(int i = 0; i < input.length(); ++i)
    {
        hashVal<<2;
        hashVal += input[i];
    }   

    hashVal = hashVal%max_size;
    while(exists[hashVal] && !list[hashVal].deletion)
    {
        if(list[hashVal].name == input) return list[hashVal];
        hashVal++;
        hashVal = hashVal%max_size;
    }
    std::cerr << input << " not found in table" << std::endl;
    return Value();
};

template <typename Key, typename Value>
bool Hash<Key, Value>::set(const Key& input_key, const Value& input_value)
{
    unsigned long location = hash(input_key, input_value);
    list[location] = input_value;
    exists[location] = true;
    used++;

    //check here for size, see if list needs to be lengthened
    return true;
};


template <typename Key, typename Value>
unsigned long Hash<Key, Value>::hash(const Key& input, const Value& val)
{
    unsigned long hashVal = max_size; 

    for(int i = 0; i < input.length(); ++i)
    {
        hashVal<<2;
        hashVal += input[i];
    }   

    hashVal = hashVal%max_size;
    while(exists[hashVal])
    {
        if(list[hashVal].name == val.name) return hashVal;
        hashVal++;
        hashVal = hashVal%max_size;
    }
    return hashVal;
};
   

template <typename Key, typename Value>
std::vector<std::string> Hash<Key, Value>::getKeys(void)
{
    std::vector<std::string> keys;
    for(unsigned long i = 0; i < this->max_size; ++i)
    {
        if(exists[i] && !list[i].deletion)
        {
            keys.push_back(list[i].name);
        }
    }
    return keys;
};

template <typename Key, typename Value>
bool Hash<Key, Value>::grow_list(void){};

template <typename Key, typename Value>
unsigned long Hash<Key, Value>::percent_full(void)
{
    unsigned long percent = used * 100;
    return percent/max_size;    
};

template <typename Key, typename Value>
bool Hash<Key, Value>::destruct_list(Value* victim)
{
    for(unsigned long i = 0; i < max_size; ++i)
    {
        if(exists[i])
        {
            exists[i] = false;
            delete victim[i];
        }
    }    
};

template <typename Key, typename Value>
bool Hash<Key, Value>::clean(void)
{
    for(unsigned long i = 0; i < max_size; ++i)
    {
      if(exists[i])
      {
        if(list[i].deletion)
        {
            exists[i] = false;
            delete list[i];
        }
      }
    }    
}; 

template <typename Key, typename Value> 
Value Hash<Key, Value>::operator [] (const Key &input)
{
    return get(input);
};

template <typename Key, typename Value> 
std::ostream& operator << (std::ostream& out , const Hash<Key,Value> &input)
{
    out << "--Name--|-Jan|-Feb|-Mar|-Apr|-May|-Jun|-Jul|-Aug|-Sep|-Nov|-Dec|-Avg|-Anual\n";
    for(unsigned long i = 0; i < input.max_size; ++i)
    {
        if(input.exists[i] && !input.list[i].deletion)
        {
           out << input.list[i].name;
           for(int j = 0; j < 12; ++j)
           {
              out << " $" << input.list[i].monthly_dues[j]; 
           }
           out << input.list[i].mothly_average_dues << " " << input.list[i].yearly_dues << "\n";
        }
    }
    return out;
};

}

